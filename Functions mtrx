import numpy as np
import sympy

def schit(): 
    while True:
        m = input(f'Введите число строк матрицы: ')
        if not m.isdigit():
            print("Вы ввели некорректное число строк, повторите попытку: ")
        else:
            break
    while True:
        n = input('Введите число столбцов матрицы: ')
        if not n.isdigit():
            print("Вы ввели некорректное число столбцов, повторите попытку: ")
        else:
            break
    m = int(m)
    n = int(n)
    while True:
        if m <0:
            m = int(input('Вы ввели некорректное число строк, повторите попытку: '))
        if n<0:
            n = int(input('Вы ввели некорректное число столбцов, повторите попытку: '))
        if n == 0 and m != 0 or m == 0 and n!=0:
            print('Данной матрицы не существует, клоун')
            m = int(input('Введите корректное число строк: '))
            n = int(input('Введите корректное число столбцов: '))
            break
        else:
            break

    mtrx = [[0 for j in range(n)]for i in range (m)]

    for i in range (m):
        for j in range (n):
            k = input(f'Введите значение ячейки а{i}{j}:')
            mtrx[i][j] = k  
    return mtrx
    
def summ(mtrx_1, mtrx_2):
  tmp_mtrx = [[0 for j in range(len(mtrx_1))]for i in range (len(mtrx_1[0]))]
  for i in range (len(mtrx_1)):
    for j in range (len(mtrx_1[0])):
      t = complex(mtrx_1[i][j])
      m = complex(mtrx_2[i][j])
      tmp_mtrx[i][j] = t + m
  return tmp_mtrx
  
  
def vychet(mtrx_1, mtrx_2):
    tmp_mtrx = [[0 for j in range(len(mtrx_1))]for i in range (len(mtrx_1[0]))]
    for i in range (len(mtrx_1)):
        for j in range (len(mtrx_1[0])):
            t = complex(mtrx_1[i][j])
            m = complex(mtrx_2[i][j])
            tmp_mtrx[i][j] = t - m
    return tmp_mtrx
    
def mult_by_count(mtrx_1, k):
    tmp_mtrx = [[0 for j in range(len(mtrx_1))]for i in range (len(mtrx_1[0]))]
    for i in range (len(mtrx_1)):
        for j in range (len(mtrx_1[0])):
            k = complex(k)
            t = complex(mtrx_1[i][j])
            tmp_mtrx[i][j] = t*k
def mult(mtrx_1, mtrx_2):
    s=0
    t=[]
    m3=[]
    r1=len(mtrx_1) 
    for z in range(0,r1):
        for j in range(0,r1):
            for i in range(0,r1):
                l1 = complex(mtrx_1[z][i])
                l2 = complex(mtrx_2[i][j])
                s=s+l1*l2
            t.append(s)
            s=0
        m3.append(t)
        t=[] 
    return m3
    return tmp_mtrx
