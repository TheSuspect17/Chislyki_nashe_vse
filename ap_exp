import numpy as np
from scipy.optimize import leastsq

def ap_exp(x,y_real):
    def norm(x, mean, sd):
        norm = []
        for i in range(x.size):
            norm += [1.0/(sd*np.sqrt(2*np.pi))*np.exp(-(x[i] - mean)**2/(2*sd**2))]
        return np.array(norm)

    mean1, mean2 = 0, -2
    std1, std2 = 0.5, 1 
    m, dm, sd1, sd2 = [5, 10, 1, 1]
    p = [m, dm, sd1, sd2] # Initial guesses for leastsq
    y_init = norm(x, m, sd1) + norm(x, m + dm, sd2) # For final comparison plot

    def res(p, y, x):
        m, dm, sd1, sd2 = p
        m1 = m
        m2 = m1 + dm
        y_fit = norm(x, m1, sd1) + norm(x, m2, sd2)
        err = y - y_fit
        return err

    plsq = leastsq(res, p, args = (y_real, x))
    y_est = norm(x, plsq[0][0], plsq[0][2]) + norm(x, plsq[0][0] + plsq[0][1], plsq[0][3])
    gamma = 0
    for i in range(len(x)):
        gamma += (y_real[i]-y_init[i])**2
        output = [[x[i]]+[y_real[i]]+[y_init[i]] for i in range(len(x))]
    return (output, gamma)
