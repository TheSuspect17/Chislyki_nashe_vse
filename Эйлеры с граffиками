import matplotlib.pyplot as plt
import math
import numpy as np
from matrix import method_min_square, newton_here_the_boss

class Exact:
    def __init__(self, solved_equation, h):
        self.f = solved_equation
        self.h = h

    def _next_y(self, xi, yi):
        return self.f(xi)

    def calculate(self, x0, y0, xf):
        ys = []
        xs = np.arange(x0 + self.h, xf + self.h, self.h)  # вектор всех значений x
        y = y0
        for x in xs:
            ys.append(y)
            y = self._next_y(x, y)
        return ys

class Euler(Exact):
    def _next_y(self, xi, yi):
        return yi + self.h * self.f(xi, yi)

class ImprovedEuler(Euler):
    def _next_y(self, xi, yi):
        h2 = self.h / 2
        delta_y = self.h * self.f(xi + h2, yi + h2 * self.f(xi, yi))
        return yi + delta_y
        
 plt.style.use('ggplot')    
    
def draw(x0, xf, h, labels, *args):
    assert len(labels) == len(args)
    xs = np.arange(x0, xf, h)
    for (i, ys) in enumerate(args):
        plt.plot(xs, ys, label=labels[i], linewidth=1)
        plt.xlabel('X')
        plt.ylabel('Y')
        plt.title("Result")
        plt.legend()
        plt.show()
        return (xs, ys)     
 
 HS = 0.01
HF = 1.01
HH = 0.01
X0 = 0
Y0 = 1
XF = 100

def equation(x, y):
    return   (math.exp(-x)-y) #ВВОД С КЛАВИАТУРЫ

def solved_equation(x):
    return ((x+C)/math.exp(x) ) 

def calculate_error(ys_approx, ys_exact):
    return [abs(y1 - y2) for y1, y2 in zip(ys_approx, ys_exact)]

def calculate_mean_error(ys_approx, ys_exact):
    return sum(calculate_error(ys_approx, ys_exact))/len(ys_exact)

if __name__ == '__main__':
    euler_error = []
    better_euler_error = []
    rk_error = []

    h_axis = np.arange(HS, HF, HH)
    for H in h_axis:
        exact = Exact(solved_equation, H)
        exact_ys = exact.calculate(X0, Y0, XF)
        euler = Euler(equation, H)
        euler_ys = euler.calculate(X0, Y0, XF)
        better_euler = ImprovedEuler(equation, H)
        b_euler_ys = better_euler.calculate(X0, Y0, XF)
        euler_error.append(calculate_mean_error(euler_ys, exact_ys))
        better_euler_error.append(calculate_mean_error(b_euler_ys, exact_ys))

    X1,Y1 = draw(HS, HF, HH, ['Euler'], euler_error)
    X2,Y2 = draw(HS, HF, HH, ['Impr Euler'], better_euler_error)
noname = method_min_square(X1,Y1)
straight = noname[1]
_ = noname[0]
gamma = round(noname[2],3)
x_square = []
f_square = []
for i in range(len(X1)):
    x_square.append(_[i][0])
    f_square.append(_[i][2])

plt.plot(x_square, f_square, 'r', label=f'Интерполированная функция c G = {gamma}')
plt.title("МНК Элером ")
plt.legend(loc='best', prop={'size': 8}, frameon = False)
plt.show()

noname = newton_here_the_boss(X1,Y1)
straight = noname[1]
x1_square = []
f1_square = []
for i in range(len(noname[1])):
    x1_square.append(noname[0][i])
    f1_square.append(noname[1][i])
plt.plot(x1_square, f1_square, 'r', label=f'Ньютон')
plt.title("Интерполяция Ньтоном Эйлера ")
plt.legend(loc='best', prop={'size': 8}, frameon = False)
plt.show()

noname = method_min_square(X2,Y2)
straight = noname[1]
_ = noname[0]
gamma = round(noname[2],3)
x_square = []
f_square = []
for i in range(len(X2)):
    x_square.append(_[i][0])
    f_square.append(_[i][2])

plt.plot(x_square, f_square, 'r', label=f'Интерполированная функция  = {gamma}')
plt.title("МНК Элером Коши")
plt.legend(loc='best', prop={'size': 8}, frameon = False)
plt.show()

noname = newton_here_the_boss(X2,Y2)
straight = noname[1]
x1_square = []
f1_square = []
for i in range(len(noname[1])):
    x1_square.append(noname[0][i])
    f1_square.append(noname[1][i])
plt.plot(x1_square, f1_square, 'r', label=f'Ньютон')
plt.title("Интерполяция Ньтоном Эйлера-Коши")
plt.legend(loc='best', prop={'size': 8}, frameon = False)

plt.show()
