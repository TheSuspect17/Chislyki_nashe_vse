import numpy as np
from fractions import Fraction

def pick_nonzero_row(m, k):
    while k < m.shape[0] and not m[k, k]:
        k += 1
    return k
    
def gssjrdn(a, b):
    nc = []
    for i in range (len(a)):
        nc.append(a[i])
    a = np.array(a, float)
    b = np.array(b, float)
    n = len(b)
    st = a
    
    m = np.hstack((st, 
                np.matrix(np.diag([1.0 for i in range(st.shape[0])]))))
    for k in range(n):
        swap_row = pick_nonzero_row(m, k)
        if swap_row != k:
            m[k, :], m[swap_row, :] = m[swap_row, :], np.copy(m[k, :])
        if m[k, k] != 1:
            m[k, :] *= 1 / m[k, k]
        for row in range(k + 1, n):
            m[row, :] -= m[k, :] * m[row, k]
    for k in range(n - 1, 0, -1):
        for row in range(k - 1, -1, -1):
            if m[row, k]:
                m[row, :] -= m[k, :] * m[row, k]
                
    for k in range(n):
        if np.fabs(a[k,k]) < 1.0e-12:
            for i in range(k+1,n):
                if np.fabs(a[i,k]) > np.fabs(a[k,k]):
                    for j in range (k,n):
                        a[k,j], a[i,j] = a[i,j], a[k,j]
                    b[k], b[i] = b[i], b[k]
                    break
        pivot = a[k,k]
        for j in range (k,n):
            a[k,j] /= pivot
        b[k] /=pivot
        for i in range(n):
            if i == k or a[i,k] ==0: 
                continue
            factor = a[i,k]
            for j in range (k,n):
                a[i,j] -= factor * a[k,j]
            b[i] -= factor * b[k]
      
    return nc, np.hsplit(m, n // 2)[1], b

def frkgssjrdn(a, b):
    nc = []
    for i in range (len(a)):
        nc.append(a[i])
    a = np.array(a, float)
    b = np.array(b, float)
    n = len(b)
    
    for i in range (n):
        for j in range(n):
            a[i,j] = Fraction(a[i,j])
            b[i] = Fraction(b[i])
    
    matrix = []
    for j in range(n):
        matrix.append(a[j]+b[j])
    matrix = np.array(matrix, float)
    matrix[i,j] = Fraction(matrix[i,j])
    
    for k in range(n):
        if np.fabs(a[k,k]) < 1.0e-12:
            for i in range(k+1,n):
                if np.fabs(a[i,k]) > np.fabs(a[k,k]):
                    for j in range (k,n):
                        a[k,j], a[i,j] = a[i,j], a[k,j]
                    b[k], b[i] = b[i], b[k]
                    break
        pivot = a[k,k]
        for j in range (k,n):
            a[k,j] /= pivot
        b[k] /=pivot
        for i in range(n):
            if i == k or a[i,k] ==0: 
                continue
            factor = a[i,k]
            for j in range (k,n):
                a[i,j] -= factor * a[k,j]
            b[i] -= factor * b[k]
            
    m = np.hstack((matrix, 
                np.matrix(np.diag([1.0 for i in range(matrix.shape[0])]))))
    for k in range(n):
        swap_row = pick_nonzero_row(m, k)
        if swap_row != k:
            m[k, :], m[swap_row, :] = m[swap_row, :], np.copy(m[k, :])
        if m[k, k] != 1:
            m[k, :] *= 1 / m[k, k]
        for row in range(k + 1, n):
            m[row, :] -= m[k, :] * m[row, k]
    for k in range(n - 1, 0, -1):
        for row in range(k - 1, -1, -1):
            if m[row, k]:
                m[row, :] -= m[k, :] * m[row, k]
    return nc, np.hsplit(m, n // 2)[1],b       
