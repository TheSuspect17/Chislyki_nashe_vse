import math
import sys
import warnings
import numpy as np
import matplotlib.pyplot as plt

accuracy = 0.00001
START_X = -1
END_X = 6
START_Y = -1
END_Y = 20
temp = []

def whence_differences(y_array):
    return_array = []
    for i in range(0, len(y_array) - 1):
        return_array.append(y_array[i + 1] - y_array[i])
    return return_array

def witchcraft_start(y_array, h):
    part_y = [y_array[0]]
    y = y_array
    for i in range(0, len(y_array) - 1):
        y = whence_differences(y)
        part_y.append(y[0] / math.factorial(i + 1) / (h ** (i + 1)))
    return part_y

def tragic_magic(coefficients_y, point, x_array):
    value = coefficients_y[0]
    for i in range(1, len(coefficients_y)):
        q = 1
        for j in range(0, i):
            q *= (point - x_array[j])
        value += coefficients_y[i] * q
    return value

def build_points(x_array, y_array):
    for i in range(0, len(x_array)):
        plt.scatter(x_array[i], y_array[i])

def newton_there(x_array, y_array):
    x0 = x_array[0]
    h = x_array[1] - x_array[0]
    build_points(x_array, y_array)
    part_y = witchcraft_start(y_array, h)
    print('Коэффициенты прямого полинома')
    print(part_y)
    x = np.linspace(x_array[0], x_array[len(x_array) - 1], 228)
    plt.plot(x, tragic_magic(part_y, x, x_array))
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.axhline(y=0, color='k')
    plt.axvline(x=0, color='k')
    plt.show()

def witchcraft_continue(y_array, h):
    part_y = [y_array[len(y_array) - 1]]
    y = y_array
    for i in range(0, len(y_array) - 1):
        y = whence_differences(y)
        part_y.append(y[len(y) - 1] / math.factorial(i + 1) / (h ** (i + 1)))
    return part_y

def ecstatic_magic(coefficients_y, point, x_array):
    value = coefficients_y[0]
    for i in range(1, len(coefficients_y)):
        q = 1
        for j in range(0, i):
            q *= (point - x_array[len(x_array) - j - 1])
        value += coefficients_y[i] * q
    return value

def newton_here_the_boss(x_array, y_array):
    x0 = x_array[0]
    h = x_array[1] - x_array[0]
    build_points(x_array, y_array)
    part_y = witchcraft_continue(y_array, h)
    print('Коэффициенты обратного полинома')
    print(part_y)
    x = np.linspace(x_array[0], x_array[len(x_array) - 1], 228)
    plt.plot(x, ecstatic_magic(part_y, x, x_array))
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.axhline(y=0, color='k')
    plt.axvline(x=0, color='k')
    plt.show()

try:
    newton_there(x, y)
except Exception as e:
    print(e)
try:
    newton_here_the_boss(x, y)
except Exception as e:
    print(e)
