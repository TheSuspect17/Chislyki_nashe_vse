import numpy as np
import sympy

def schit(): 
    while True:
        m = input(f'Введите число строк матрицы: ')
        n = input('Введите число столбцов матрицы: ')
        if not m.isdigit():
            print("Вы ввели некорректное число строк, повторите попытку: ")
        if not n.isdigit():
            print("Вы ввели некорректное число столбцов, повторите попытку: ")
        else:
            break
            
    m = int(m)
    n = int(n)
    while True:
        if m <0:
            m = int(input('Вы ввели некорректное число строк, повторите попытку: '))
        if n<0:
            n = int(input('Вы ввели некорректное число столбцов, повторите попытку: '))
        if n == 0 and m != 0 or m == 0 and n!=0:
            print('Данной матрицы не существует, клоун')
            m = int(input('Введите корректное число строк: '))
            n = int(input('Введите корректное число столбцов: '))
            break
        else:
            break

    mtrx = [[0 for j in range(n)]for i in range (m)]

    for i in range (m):
        for j in range (n):
            k = input(f'Введите значение ячейки а{i}{j}:')
            mtrx[i][j] = k  
    return mtrx
    
def summ(mtrx_1, mtrx_2):
  tmp_mtrx = [[0 for j in range(len(mtrx_1))]for i in range (len(mtrx_1[0]))]
  for i in range (len(mtrx_1)):
    for j in range (len(mtrx_1[0])):
      t = complex(mtrx_1[i][j])
      m = complex(mtrx_2[i][j])
      tmp_mtrx[i][j] = t + m
  return tmp_mtrx
  
  
def vychet(mtrx_1, mtrx_2):
    tmp_mtrx = [[0 for j in range(len(mtrx_1))]for i in range (len(mtrx_1[0]))]
    for i in range (len(mtrx_1)):
        for j in range (len(mtrx_1[0])):
            t = complex(mtrx_1[i][j])
            m = complex(mtrx_2[i][j])
            tmp_mtrx[i][j] = t - m
    return tmp_mtrx
    
def mult_by_count(mtrx_1, k):
    tmp_mtrx = [[0 for j in range(len(mtrx_1))]for i in range (len(mtrx_1[0]))]
    for i in range (len(mtrx_1)):
        for j in range (len(mtrx_1[0])):
            k = float(k)
            t = complex(mtrx_1[i][j])
            tmp_mtrx[i][j] = t*k
def mult(mtrx_1, mtrx_2):
    s=0
    t=[]
    m3=[]
    r1=len(mtrx_1) 
    for z in range(0,r1):
        for j in range(0,r1):
            for i in range(0,r1):
                l1 = complex(mtrx_1[z][i])
                l2 = complex(mtrx_2[i][j])
                s=s+l1*l2
            t.append(s)
            s=0
        m3.append(t)
        t=[] 
    return m3
    return tmp_mtrx

B = 0
while True:
  print("Что будем делать?")
  print("0.Выйти из калькулятора")
  print("1.Сложение матриц ")
  print("2.Вычитание матриц ")
  print("3.Умножение матрицы на число ")
  print("4.Умножение матриц ")
  choise_1 = int(input('Сделайте ваш выбор нажав [0/1/2/3/4] :'))
###################################### тут нужна проверка на даунича
  if choise_1 == 0:
    break
  if choise_1 == 1:
    print(f'На данный момент в буffере находится матрица {B}, если вы хотите ее использовать для вычислений?')
    print("0.Нет")
    print("1.Да ")
    choise_2 = int(input('Сделайте ваш выбор нажав [0/1] :'))
###################################### тут нужна проверка на даунича
    if choise_2 == 0:
      print('Введите 1 матрицу: ')
      mtrx_1 = schit()
    else:
      mtrx_1 = B
    print('Введите 2 матрицу: ')
    mtrx_2 = schit()
  ###################################### тут впихнуть проверку на тип данных, чтобы не было такого: [['10']] + [['20']] = [[(30+0j)]]
    print('Получаем: ')
    B = summ(mtrx_1, mtrx_2)
    print(f'{mtrx_1} + {mtrx_2} = {summ(mtrx_1, mtrx_2)}')
  if choise_1 == 2:
    print(f'На данный момент в буffере находится матрица {B}, если вы хотите ее использовать для вычислений?')
    print("0.Нет")
    print("1.Да ")
    choise_2 = int(input('Сделайте ваш выбор нажав [0/1] :'))
###################################### тут нужна проверка на даунича
    if choise_2 == 0:
      print('Введите 1 матрицу: ')
      mtrx_1 = schit()
    else:
      mtrx_1 = B
    print('Введите 2 матрицу: ')
    mtrx_2 = schit()
  ###################################### тут впихнуть проверку на тип данных, чтобы не было такого: [['30']] - [['20']] = [[(10+0j)]]
    print('Получаем: ')
    B = vychet(mtrx_1, mtrx_2)
    print(f'{mtrx_1} - {mtrx_2} = {vychet(mtrx_1, mtrx_2)}')
  if choise_1 == 3:
    print(f'На данный момент в буffере находится матрица {B}, если вы хотите ее использовать для вычислений?')
    print("0.Нет")
    print("1.Да ")
    choise_2 = int(input('Сделайте ваш выбор нажав [0/1] :'))
###################################### тут нужна проверка на даунича
    if choise_2 == 0:
      print('Введите 1 матрицу: ')
      mtrx_1 = schit()
    else:
      mtrx_1 = B
    k = complex(input('Введите число: '))
  ###################################### тут нужна проверка на даунича
    B = mult_by_count(mtrx_1,k)
    print(f'{mtrx_1} * {k} = {mult_by_count(mtrx_1,k)}')
  if choise_1 == 4:
    print(f'На данный момент в буffере находится матрица {B}, если вы хотите ее использовать для вычислений?')
    print("0.Нет")
    print("1.Да ")
    choise_2 = int(input('Сделайте ваш выбор нажав [0/1] :'))
###################################### тут нужна проверка на даунича
    if choise_2 == 0:
      print('Введите 1 матрицу: ')
      mtrx_1 = schit()
    else:
      mtrx_1 = B1
    print('Введите 2 матрицу: ')
    mtrx_2 = schit()
  ###################################### тут впихнуть проверку на тип данных, чтобы не было такого: [['1']] * [['2']] = [[(2+0j)]]
    print('Получаем: ')
    B = mult(mtrx_1, mtrx_2)
    print(f'{mtrx_1} * {mtrx_2} = {mult(mtrx_1, mtrx_2)}')
  print('Результат сохранен в буffер.')
